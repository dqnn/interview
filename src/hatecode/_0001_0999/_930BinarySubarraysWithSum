public class _930BinarySubarraysWithSum {
/*
930. Binary Subarrays With Sum
Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
*/
    
    // thinking process: O(n)/O(1)
    
    //atMost will return how many subarray sum <= target, so the diff between atMost(A, target) - atMost(A, target-1) is what we want
    public int numSubarraysWithSum(int[] A, int target) {
        if (A == null || A.length < 1) return 0;
        
        return atMost(A, target) - atMost(A, target - 1);
    }
    
    
    private int atMost(int[] A, int t) {
        int res = 0; 
        int i = 0; 
        for(int j = 0; j < A.length;j++) {
            t -= A[j];
            while (t < 0 && i <=j ) {
                t += A[i++];
            }
            res += j - i + 1;
        }
        
        return res;
    }
    
    
    
    public int numSubarraysWithSum_PrefixSum(int[] A, int target) {
        if (A == null || A.length < 1) return 0;
        
        int[] count = new int[A.length + 1];
        int sum = 0, res = 0;
        count[0] = 1;
        for(int a : A) {
            sum += a;
            if (sum >= target) {
                res += count[sum - target];
            }
            count[sum]++;
        }
        
        return res;
    }
}
