TODO:
1. 188--buy stock IV, how to understand prevMax = Math.max(prevMax, dp[i - 1][j - 1] - prices[j]);
2. 740 delete and earn, i could understand the dp[i] = max(dp[i-2] + sum[nums[i]], 
dp[i-1]), but i cannot understand the iskip and itake version. 
3. backpack, how transfrom from 2D array to 1D to save space, 
A: 
4. how to understand the max square dp foruma, 3 square? why? max rectangle should applied to 
max square, 
5. re-write Trie class with hashmap, so that it can adapt to any problems, include add, search methods
6. write paint house 2 on paper from O(nk^2) to O(nk), this is also space optimization
7.LIS and russian env doll also used bianry search, so need to understand how and why we use bianry search
8.guess the number II, thinking about why k + max(dp[i][k-1], dp[k+1][j]), why we use max here? and 
draw the tree， another is thinking about why 
9.combinationSum4,  knapsack VI problems. 1. 2D solutions, 2. to understand in VI, why we put target in 
otter loop, 
10. longest wigger sequence, why up = down + 1? need more thoughts
11. lc 410, dp solution, not understand how it formed m groups. 
12. 514. Freedom Trail why we have to iterate from back, and why result is dp[0][0], +m can understand
13. longest palindrome sequence, i has to start from length() because j depends j+1, inner part depends on 
outter part
14. student record II, 552, brute force(O(3^n))->memo(O(n))->O(lgn) with the help of fast matrix
15. super wash machines, how max of dp array is the answer, the max stream?
16: lc 801, minimal swap to increase sequence, how to understand the forumla? 
17. max chunks to be sorted, double scan, how we can prove it?
18. Minimum Unique Word Abbreviation cannot understand the best solution?
19. 909. Snakes and Ladders not understand the problem.
20. 25 reverse() is interesting one about last two lines of code, 0->1->2->3->4->5, remember how we move begin and cur
21： https://www.cs.usfca.edu/~galles/visualization/BTree.html this has a lot visualize graph
22: 163, the bucket sort, did not understand the last step, how we can get the max gap from gap?
23: 1055, for the greedy solution, why res++ could work if we cannot find the index char, also for binary
search solution, if we get at < 0, why we ~ at? 
24: stock IV, why noStock[j] = Math.max(noStock[j], ownStock[j] + price), why j -1 not j, ownStock 
actually is j-1 from noStock to ownStock state change, 
25: hungary algorithms, how to use it? Campus Bike II, this could reduce the complexity O(n^2), also note
that workers > Bikes
26: LC 855, seat() is eaily O(lgn), how to make leave() also O(lgn)? there is TreeMap<Len, TreeSet> treeset stored
all starting index, len is the interval length, already have the solution, but needs to change the code 
27: ExpiredHashMap.java, 1 to understand more about concurrentHashMap, 2 to remeber the code
28: RetainAllRoots.java, why we can add to result if !node.isRed? 
29: CokeBeverageMachine.java, why we did not detect the lower boundary to make it false? the dp solution, why
use i - button.get(0)?
30: 19. 生成随机迷宫  have to look back the statement is pretty stupid? totally not understand the problem
31：GoBoundaryDectection.java, the problem is simple, but two question: 1. does the problem require the rival 
cannot place a new card on the board? 2. the card color, it must be different color. i need to think about later this week
thinking about helper(1) || helper(2) || helper(3) || helper(4) vs for(x-1,4){helper(x)}
32: n层map，每层m个node，node和edge都有值，问第一层到最后的minimum cost 
https://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=434363  记录这里是因为没有找到准确题目描述， but it should be 
highly similiar to minimal path sum
33: LC 774, to understand the DP solutions, 
34: among all these binary tree questions, i can find we focus on subtree(at least 90% questions could be solved)
but LC robHouse III is not among this, because the requirement is not adjacent. 
35: burst ballons, for the 3 layers loop, why we have to use width as outtest loop, can we change to i, j, such ?
36: think again for LC 769. Max Chunks To Make Sorted, why we compare to different position instead of same position?
and if i change to same position, it is wrong answer. 
37: 95. Unique Binary Search Trees II needs to take a look 
38：LC 834. Sum of Distances in Tree, res[root] += res[i] + count[i] in dfs, in dfs2, res[i] = res[root] - count[i] + n - count[i];
1 why in this way? 2. time and space complexity?
39: Binary Tree post order iterative solution, need to remember, 
40 UF with map based, how to solve the path compression, components, and each component size?
41: DifferentWaystoAddParentheses.java, the follow up, how about negative number and get the expressions?
42: 736. Parse Lisp Expression this de-prioritize 
43: knapSnack_Common.java, dp[0][0] = 1;  needs to in backPackIV_2DDP?
44: google snapshot question, need to review how 's the data structure for string diff looks like? 
45: DecodeString.java, needs to solve the nested version, and remember the calculator one
46: not fully understood the below 2 questions:
google doc 有个comment 功能，每个comment是个tuple（int A，int B）。A表示是指向正文中哪一行的comment, 
B表示当前comment实际显示在正文对应的哪一行。要求实现用户在前一行插入一个comment后如果space不够了，
后面的comment自动下移。

国王住在King's Landing, 他手下有很多的信使，他要发布一项消息给所有的kingdoms，派信使去送信。
问通知完所有的kingdoms所需要花费的最长时间。
47 GoogleExportPath.java  没做， 没理解题目意义
48. Domino and Tromino Tiling.java, LC 790 and follow up, de-prioritize
49 LegalExpressions.java not finished. 
50:
第四轮 直接扔给我一张纸，一开始看到题目是懵逼的 ，输入是一堆线段，找所有可以形成的正方形的数量，
自己设计数据结构和算法。clarify之后如下，平面无限大，线段都是水平或者竖直，不会cross，但端点可能在另一个线段上。
解法大概是枚举对角线，然后check四条边，但是不能直接check每一条边是不是在input 的线段当中，
因为可能正方形的一条边是由多个input线段组成的，或者完全被包含在某一个线段当中，所以需要对所有x和y值建segment tree，
然后每一个查四条边是不是完全被当前坐标的segment tree cover

有没有同学可以分享一下思路,如何用线段树判断一段距离都被cover了

思路：不用线段树的操作，建立两个并查集来merge水平和垂直方向上坐标相同的点。 
初始状态是一堆输入的线段就可以认为是并查集的初始状态。
51: cutMatrix.java
52: FindtheDuplicateNumber.java to understand how many elements cannt be found in array by BS?
53.RainDrop.java，not fully understood it
54：527. Word Abbreviation， needs to understand the recursive function
55. GoogleGoBoundaryDectection.java Go on binary tree. need to understand
56 GuessNumberHigherorLowerII.java not fully understood
57.Cracking the Safe 
58: UniqueBinarySearchTreesII label tree, not fully understand
59: doc on page-113
60:reconstruct itinerary, how about output all possible itinerary? note it could visit twice(cycle) on answers
61: Maximum Sum of 3 Non-Overlapping Subarrays follow up, n segments?
62: edit distance add is fxc->fad, fxcd->fad + 1->fxc->fa
64: grep -rl parenthesis . | xargs sed -i "" -e 's/parenthesis/parentheses/g'
65: LC 827, how about you can flip k cells from water to land, then return the max area of the island






